class Point { constructor(x_, y_){this.x = x_; this.y = y_;} }
class Triangle {
    constructor(center_, length_){
        this.points = [];
        this.center = center_;
        this.length = length_;
        this.recalc();
    }
    recalc(){
        this.points = [];
        this.points.push(new Point(this.center.x, this.center.y + this.length));
        this.points.push(new Point(this.center.x - this.length, this.center.y - this.length));
        this.points.push(new Point(this.center.x + this.length, this.center.y - this.length));
    }
    draw(){
        let path = new Path2D();
        path.moveTo(this.points[0].x, this.points[0].y);
        for(let k = 0; k < this.points.length; k++){
            path.lineTo(this.points[k].x, this.points[k].y);
        }
        path.lineTo(this.points[0].x, this.points[0].y);
        return path;
    }
}
class Square {
    constructor(center_, length_){
        this.points = [];
        this.center = center_;
        this.length = length_;
        this.recalc();
    }
    recalc(){
        this.points = [];
        this.points.push(new Point(this.center.x - this.length, this.center.y - this.length));
        this.points.push(new Point(this.center.x + this.length, this.center.y - this.length));
        this.points.push(new Point(this.center.x + this.length, this.center.y + this.length));
        this.points.push(new Point(this.center.x - this.length, this.center.y + this.length));
    }
    draw(){
        let path = new Path2D();
        path.moveTo(this.points[0].x, this.points[0].y);
        for(let k = 0; k < this.points.length; k++){
            path.lineTo(this.points[k].x, this.points[k].y);
        }
        path.lineTo(this.points[0].x, this.points[0].y);
        return path;
    }
}
class Circle {
    constructor(center_, radius_){
        this.center = center_;
        this.length = radius_;
        this.recalc();
    }
    recalc(){}
    draw(){
        let path = new Path2D();
        path.moveTo(this.center.x + this.length, this.center.y);
        path.arc(this.center.x, this.center.y, this.length, 0, Math.PI * 2, true);
        return path;
    }
}
class Rhombus {
    constructor(center_, length_){
        this.center = center_;
        this.length = length_;
        this.points = [];
        this.recalc();
    }
    recalc(){
        this.points = [];
        this.points.push(new Point(this.center.x, this.center.y - this.length));
        this.points.push(new Point(this.center.x + this.length / 1.5, this.center.y));
        this.points.push(new Point(this.center.x, this.center.y + this.length));
        this.points.push(new Point(this.center.x - this.length / 1.5, this.center.y));
    }
    draw(){
        let path = new Path2D();
        path.moveTo(this.points[0].x, this.points[0].y);
        for(let k = 0; k < this.points.length; k++){
            path.lineTo(this.points[k].x, this.points[k].y);
        }
        path.lineTo(this.points[0].x, this.points[0].y);
        return path;
    }
}
class Pentagon {
    constructor(center_, length_){
        this.points = [];
        this.center = center_;
        this.length = length_;
        this.recalc();
    }
    recalc(){
        this.points = [];
        this.points.push(new Point(this.center.x, this.center.y - this.length));
        this.points.push(new Point(this.center.x + this.length * Math.cos(18 * Math.PI / 180), this.center.y - this.length * Math.sin(18 * Math.PI / 180)));
        this.points.push(new Point(this.center.x + this.length * Math.cos(-54 * Math.PI / 180), this.center.y - this.length * Math.sin(-54 * Math.PI / 180)));
        this.points.push(new Point(this.center.x - this.length * Math.cos(-54 * Math.PI / 180), this.center.y - this.length * Math.sin(-54 * Math.PI / 180)));
        this.points.push(new Point(this.center.x - this.length * Math.cos(18 * Math.PI / 180), this.center.y - this.length * Math.sin(18 * Math.PI / 180)));
    }
    draw(){
        let path = new Path2D();
        path.moveTo(this.points[0].x, this.points[0].y);
        for(let k = 0; k < this.points.length; k++){
            path.lineTo(this.points[k].x, this.points[k].y);
        }
        path.lineTo(this.points[0].x, this.points[0].y);
        return path;
    }
}
class Hexagon {
    constructor(center_, length_){
        this.points = [];
        this.center = center_;
        this.length = length_;
        this.recalc();
    }
    recalc(){
        this.points = [];
        let frac = 1 - (1 / 6);
        this.points.push(new Point(this.center.x - this.length, this.center.y));
        this.points.push(new Point(this.center.x - this.length / 2, this.center.y - this.length * frac)) ;
        this.points.push(new Point(this.center.x + this.length / 2, this.center.y - this.length * frac)) ;
        this.points.push(new Point(this.center.x + this.length, this.center.y));
        this.points.push(new Point(this.center.x + this.length / 2, this.center.y + this.length * frac)) ;
        this.points.push(new Point(this.center.x - this.length / 2, this.center.y + this.length * frac)) ;
    }
    draw(){
        let path = new Path2D();
        path.moveTo(this.points[0].x, this.points[0].y);
        for(let k = 0; k < this.points.length; k++){
            path.lineTo(this.points[k].x, this.points[k].y);
        }
        path.lineTo(this.points[0].x, this.points[0].y);
        return path;
    }
}
const bgdefault = getComputedStyle(document.body).getPropertyValue("--bg-default");
const fgdefault = getComputedStyle(document.body).getPropertyValue("--fg-default");
const canvas = document.getElementById("canvas");
const container = document.getElementById("sorting-container");
const ctx = canvas.getContext("2d");
const thock = new Audio("data:audio/x-wav;base64,");
let start, end;
let oldsize = new Point(container.clientWidth, container.clientHeight);
let outlines = [];
let shapes = [];
let levelNumber = (localStorage.getItem("level") || 1);
let levelMaxScore = 0;
let mousePosition = new Point(0, 0);
let grabbedShape = null;
let actx = null;
const remap = (val, inMin, inMax, outMin, outMax) => outMin + (val - inMin) * (outMax - outMin) / (inMax - inMin);
const getRandomInt = (min, max) => {return Math.floor(Math.random() * (max - min) + min);}
const resize = () => {
    canvas.width = container.clientWidth;
    canvas.height = container.clientHeight;
    align(new Point(container.clientWidth, container.clientHeight));
    oldsize = new Point(container.clientWidth, container.clientHeight);
}
const until = (condition) => {
    const poll = resolve => condition() ? resolve() : setTimeout(_ => poll(resolve), 16);
    return new Promise(poll);
}
const align = (newsize) => {
    let vshapes = Math.floor((outlines.length - 1) / 3);
    let hshapes = vshapes === 0 ? outlines.length : 3;
    let shapeSize = 50;
    for(let i = 0; i < outlines.length; i++){
        outlines[i].center.x = canvas.width / (hshapes + 1) * ((i % 3) + 1);
        outlines[i].center.y = canvas.height / (vshapes + 2) * (Math.floor(i / 3) + 1);
        outlines[i].length = shapeSize;
        outlines[i].recalc();
    }
    for(let i = 0; i < shapes.length; i++){
        shapes[i].center.x = remap(shapes[i].center.x, 0, oldsize.x, 0, newsize.x);
        shapes[i].center.y = remap(shapes[i].center.y, 0, oldsize.y, 0, newsize.y);
        shapes[i].length = shapeSize;
        shapes[i].recalc();
    }
}

const playThock = () => {
    thock.play();
}
const generateLevel = () => {
    start = performance.now();
    outlines = [];
    shapes = [];
    let sc = 0, tc = 0, cc = 0, rc = 0, hc = 0, pc = 0;
    levelMaxScore = Math.min(6, levelNumber);
    while(outlines.length < levelMaxScore){
        let rand = getRandomInt(0, 6);
        if(rand === 0 && tc < 1){
            outlines.push(new Triangle(new Point(canvas.width / 2, canvas.height / 2), 50))
            shapes.push(new Triangle(new Point(getRandomInt(50, canvas.width - 50), getRandomInt(50, canvas.height - 50)), 50));
            tc++;
        } else if(rand === 1 && sc < 1){
            outlines.push(new Square(new Point(canvas.width / 2, canvas.height / 2), 50))
            shapes.push(new Square(new Point(getRandomInt(50, canvas.width - 50), getRandomInt(50, canvas.height - 50)), 50));
            sc++;
        } else if (rand === 3 && cc < 1){
            outlines.push(new Circle(new Point(canvas.width / 2, canvas.height / 2), 50))
            shapes.push(new Circle(new Point(getRandomInt(50, canvas.width - 50), getRandomInt(50, canvas.height - 50)), 50));
            cc++;
        } else if(rand === 4 && rc < 1){
            outlines.push(new Rhombus(new Point(canvas.width / 2, canvas.height / 2), 50));
            shapes.push(new Rhombus(new Point(getRandomInt(50, canvas.width - 50), getRandomInt(50, canvas.height - 50)), 50));
            rc++;
        } else if(rand === 5 && hc < 1){
            outlines.push(new Hexagon(new Point(canvas.width / 2, canvas.height / 2), 50));
            shapes.push(new Hexagon(new Point(getRandomInt(50, canvas.width - 50), getRandomInt(50, canvas.height - 50)), 50));
            hc++;
        } else if(pc < 1){
            outlines.push(new Pentagon(new Point(canvas.width / 2, canvas.height / 2), 50));
            shapes.push(new Pentagon(new Point(getRandomInt(50, canvas.width - 50), getRandomInt(50, canvas.height - 50)), 50));
            pc++;
        }
        align(new Point(container.clientWidth, container.clientHeight));
        outlines[outlines.length - 1].recalc();
        shapes[shapes.length - 1].recalc();
    }
}

let celebrating = false;


const calcScore = async () => {
    if(celebrating) return;
    let score = 0;
    for(let i = 0; i < shapes.length; i++){
        if(shapes[i].center.x === outlines[i].center.x && shapes[i].center.y === outlines[i].center.y){
            score++;
        }
    }
    if(score === levelMaxScore){
        celebrating = true;
        const osc = new OscillatorNode(actx);
        const gain = new GainNode(actx);
        osc.connect(gain).connect(actx.destination);
        gain.gain.setValueAtTime(0, actx.currentTime);
        gain.gain.linearRampToValueAtTime(0.2, actx.currentTime + 0.1);
        gain.gain.linearRampToValueAtTime(0, actx.currentTime + 1);
        osc.type = "sine"
        const C4 = 261.63;
        const G4 = 392.00;
        const C5 = 523.25;
        let freqs = [C4, G4, C5];
        let time = 0;
        let index = 0;
        while(time < 1){
            osc.frequency.setValueAtTime(freqs[index % 3], actx.currentTime + time);
            time += 0.05;
            index++;
        }
        osc.start();
        end = performance.now();
        await new Promise((r) => setTimeout(r, 1000));
        osc.stop();
        levelNumber++;
        localStorage.setItem("level", levelNumber)
        generateLevel();
        celebrating = false;
    }
}
const shapeContains = (p, s) => {
    if(p.x > (s.center.x - (s.length)) && p.x < (s.center.x + (s.length))){
        if(p.y > (s.center.y - (s.length)) && p.y < (s.center.y + s.length)){
            return true;
        }
    }
    return false;
}
const grab = () => {
    if(actx === null) actx = new AudioContext();
    for(let i = 0; i < shapes.length; i++){
        if(shapeContains(mousePosition, shapes[i])){
            grabbedShape = i;
            return;
        }
    }
}
const release = () => {
    if(shapes[grabbedShape] === undefined) return;
    if(shapeContains(mousePosition, outlines[grabbedShape])){
        playThock();
        shapes[grabbedShape].center = outlines[grabbedShape].center;
        shapes[grabbedShape].recalc();
    }
    grabbedShape = -1;
    calcScore();
}

const write = (text, p) => {
    ctx.fillText(text, p.x - ctx.measureText(text).width / 2, p.y);
    ctx.strokeText(text, p.x - ctx.measureText(text).width / 2, p.y);
}
const getMessage = (n) => {
    const messages = [
        "Yay! You did it!",
        "Good job!",
        "...",
        "Took you long enough.",
        "Not very impressive.",
        `Wow! That took you a whole ${(end - start) / 1000} seconds!`,
        "A 2 year old could do this.",
        "Would it kill you to go faster?",
        "HURRY UPPPPPPP",
    ];
    return(messages[n % messages.length]);
}
const update = (time) => {
    ctx.setTransform(1, 0, 0, 1, 0, 0);
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.font = "4vmin Noto Sans Mono";
    ctx.fillStyle = fgdefault;
    ctx.strokeStyle = bgdefault;
    for(let i = 0; i < shapes.length; i++){
        ctx.fill(shapes[i].draw());
        ctx.stroke(shapes[i].draw());
    }
    ctx.strokeStyle = fgdefault;
    for(let i = 0; i < outlines.length; i++){
        ctx.stroke(outlines[i].draw());
    }
    ctx.strokeStyle = bgdefault;
    write(`Level ${levelNumber}`, new Point(canvas.width / 2, 100));
    if(celebrating){
        write(getMessage(levelNumber - 1), new Point(canvas.width / 2, canvas.height / 2));
    }

    requestAnimationFrame(update);
}
document.getElementById("resetNumberEl").addEventListener("click", () => {
    if(confirm("Are you sure?")) {
        localStorage.clear();
        levelNumber = 1;
        generateLevel();
    }
});

addEventListener("resize", resize);
addEventListener("mousedown", () => grab());
addEventListener("mouseup", () => release());
addEventListener("mousemove", (e) => {
    mousePosition = new Point(e.pageX - canvas.getBoundingClientRect().left, e.pageY - canvas.getBoundingClientRect().top);
    if(shapes[grabbedShape] !== undefined){
        if(mousePosition.x + shapes[grabbedShape].length < canvas.width && 
            mousePosition.x - shapes[grabbedShape].length > 0 &&
            mousePosition.y + shapes[grabbedShape].length < canvas.height &&
            mousePosition.y - shapes[grabbedShape].length > 0){
            shapes[grabbedShape].center = mousePosition;
            shapes[grabbedShape].recalc();
        }
    }
});



resize();
generateLevel();
update();
